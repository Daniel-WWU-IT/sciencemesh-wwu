replicaCount: 1

image:
  repository: cs3org/revad
  pullPolicy: Always

http:
  service:
    port: 20080

grpc:
  service:
    port: 20099

# https://reva.link/docs/config/
configFiles:
  users.toml: |
    [shared]
    jwt_secret = "Pive-Fumkiu4"

    # This users.toml config file will start a reva service that:
    # - handles user metadata and user preferences
    # - serves the grpc services on port 18000
    [grpc]
    address = "0.0.0.0:18000"
    
    [grpc.services.authprovider]
    auth_manager = "json"
    
    [grpc.services.authprovider.auth_managers.json]
    users = "users.demo.json"
    
    [grpc.services.userprovider]
    driver = "json"
    
    [grpc.services.userprovider.drivers.json]
    users = "users.demo.json"
  users.demo.json: |
    [
        {
            "id": {
                "opaque_id": "4c510ada-c86b-4815-8820-42cdf82c3d51",
                "idp": "https://sciencemesh-test.uni-muenster.de/api/"
            },
            "username": "einstein",
            "secret": "relativity",
            "mail": "einstein@example.org",
            "display_name": "Albert Einstein",
            "groups": ["sailing-lovers", "violin-haters", "physics-lovers"]
        },
        {
            "id": {
                "opaque_id": "f7fbf8c8-139b-4376-b307-cf0a8c2d0d9c",
                "idp": "https://sciencemesh-test.uni-muenster.de/api/"
            },
            "username": "marie",
            "secret": "radioactivity",
            "mail": "marie@example.org",
            "display_name": "Marie Curie",
            "groups": ["radium-lovers", "polonium-lovers", "physics-lovers"]
        },
        {
            "id": {
                "opaque_id": "932b4540-8d16-481e-8ef4-588e4b6b151c",
                "idp": "https://sciencemesh-test.uni-muenster.de/api/"
            },
            "username": "richard",
            "secret": "superfluidity",
            "mail": "richard@example.org",
            "display_name": "Richard Feynman",
            "groups": ["quantum-lovers", "philosophy-haters", "physics-lovers"]
        }
    ]
  storage-oc.toml: |
    # This storage.toml config file will start a reva service that:
    [shared]
    jwt_secret = "Pive-Fumkiu4"
    gatewaysvc = "localhost:19000"
    
    # - authenticates grpc storage provider requests using the internal jwt token
    # - authenticates http upload and download requests requests using basic auth
    # - serves the storage provider on grpc port 11000
    # - serves http dataprovider for this storage on port 11001
    #   - /data - dataprovider: file up and download
    [grpc]
    address = "0.0.0.0:11000"
    
    # This is a storage proider that grants direct acces to the wrapped storage
    # we have a locally running dataprovider
    [grpc.services.storageprovider]
    driver = "owncloud"
    mount_path = "/oc"
    mount_id = "123e4567-e89b-12d3-a456-426655440000"
    expose_data_server = true
    data_server_url = "https://sciencemesh-test.uni-muenster.de/api/data"
    
    [grpc.services.storageprovider.drivers.owncloud]
    datadirectory = "/var/tmp/reva/data"
        
    [http]
    address = "0.0.0.0:11001"
    
    [http.services.dataprovider]
    driver = "owncloud"
    temp_folder = "/var/tmp/reva/tmp"
    
    [http.services.dataprovider.drivers.owncloud]
    datadirectory = "/var/tmp/reva/data"
  storage-home.toml: |
    # This storage-home.toml config file will start a reva service that:
    [shared]
    jwt_secret = "Pive-Fumkiu4"
    gatewaysvc = "localhost:19000"
    
    # - authenticates grpc storage provider requests using the internal jwt token
    # - authenticates http upload and download requests requests using basic auth
    # - serves the home storage provider on grpc port 12000
    # - serves http dataprovider for this storage on port 12001
    #   - /data - dataprovider: file up and download
    #
    # The home storage will inject the username into the path and jail users into
    # their home directory
    
    [grpc]
    address = "0.0.0.0:12000"
    
    # This is a storage proider that grants direct acces to the wrapped storage
    # TODO same storage id as the /oc/ storage provider
    # if we have an id, we can directly go to that storage, no need to wrap paths
    # we have a locally running dataprovider
    # this is where clients can find it
    # the context path wrapper reads tho username from the context and prefixes the relative storage path with it
    [grpc.services.storageprovider]
    driver = "owncloud"
    mount_path = "/home"
    mount_id = "123e4567-e89b-12d3-a456-426655440000"
    expose_data_server = true
    data_server_url = "http://localhost:12001/data"
    enable_home_creation = true
    
    [grpc.services.storageprovider.drivers.owncloud]
    datadirectory = "/var/tmp/reva/data"
    enable_home = true
    
    [http]
    address = "0.0.0.0:12001"
    
    [http.services.dataprovider]
    driver = "owncloud"
    temp_folder = "/var/tmp/reva/tmp"
    
    [http.services.dataprovider.drivers.owncloud]
    datadirectory = "/var/tmp/reva/data"
    enable_home = true
  shares.toml: |
    [shared]
    jwt_secret = "Pive-Fumkiu4"

    # GRPC:
    # - serves user and public link shares
    [grpc]
    address = "0.0.0.0:17000"
    
    [grpc.services.usershareprovider]
    driver = "memory"
    
    [grpc.services.publicshareprovider]
    driver = "memory"
  providers.demo.json: |
    [
      {
          "domain": "cern.ch",
          "api_version": "0.0.1",
          "api_endpoint": "http://127.0.0.1:13001/ocm/",
          "webdav_endpoint": "http://127.0.0.1:13001/ocm/webdav/"
      },
      {
          "domain": "cesnet.cz",
          "api_version": "0.0.1",
          "api_endpoint": "http://127.0.0.1:13001/ocm/",
          "webdav_endpoint": "http://127.0.0.1:13001/ocm/webdav/"
      },
      {
          "domain": "example.org",
          "api_version": "0.0.1",
          "api_endpoint": "http://127.0.0.1:13001/ocm/",
          "webdav_endpoint": "http://127.0.0.1:13001/ocm/webdav/"
      },
      {
          "domain": "test.org",
          "api_version": "0.0.1",
          "api_endpoint": "http://127.0.0.1:13001/ocm/",
          "webdav_endpoint": "http://127.0.0.1:13001/ocm/webdav/"
      }
    ]
  ocmd.toml: |
    [shared]
    jwt_secret = "Pive-Fumkiu4"
    gatewaysvc = "localhost:19000"

    [grpc]
    address = "0.0.0.0:13000"

    [grpc.services.ocmcore]
    driver = "json"

    # Note that ocmcore and ocmshareprovider should use the same file for storing the shares.
    [grpc.services.ocmcore.drivers.json]
    #file = " /var/tmp/reva/shares_server_1.json"
    
    [grpc.services.ocminvitemanager]
    driver = "memory"
    
    [grpc.services.ocmshareprovider]
    driver = "json"
    
    [grpc.services.ocmshareprovider.drivers.json]
    #file = " /var/tmp/reva/shares_server_1.json"
    
    [grpc.services.ocmproviderauthorizer]
    driver = "json"
    
    [grpc.services.ocmproviderauthorizer.drivers.json]
    providers = "providers.demo.json"
    
    [http]
    enabled_services = ["ocmd"]
    enabled_middlewares = ["providerauthorizer", "cors"]
    address = "0.0.0.0:13001"
    
    [http.services.ocmd]
    prefix = "ocm"
    
    [http.middlewares.providerauthorizer]
    driver = "json"
    
    [http.middlewares.providerauthorizer.drivers.json]
    providers = "providers.demo.json"
    
    [http.middlewares.cors]
  revad.toml: |
    [shared]
    jwt_secret = "Pive-Fumkiu4"
    gatewaysvc = "localhost:19000"

    # This gateway.toml config file will start a reva service that:
    # - serves as a gateway for all requests
    # - looks up the storageprovider using a storageregistry
    # - looks up the authprovider using an authregistry
    # - serves the gateway on grpc port 19000
    # - serves http datagateway on port 19001
    #   - /data - datagateway: file up and download
    [grpc]
    address = "0.0.0.0:19000"
    
    [grpc.services.gateway]
    # registries
    authregistrysvc = "localhost:19000"
    storageregistrysvc = "localhost:19000"
    # user metadata
    preferencessvc = "localhost:18000"
    userprovidersvc = "localhost:18000"
    # an approvider lives on "localhost:18000" as well, see users.toml
    # sharing
    usershareprovidersvc = "localhost:17000"
    publicshareprovidersvc = "localhost:17000"
    # ocm
    ocmcoresvc = "localhost:13000"
    ocmshareprovidersvc = "localhost:13000"
    ocminvitemanagersvc = "localhost:13000"
    ocmproviderauthorizersvc = "localhost:13000"
    # other
    commit_share_to_storage_grant = true
    datagateway = "http://localhost:19001/data"
    transfer_shared_secret = "replace-me-with-a-transfer-secret" # for direct uploads
    transfer_expires = 6 # give it a moment
    #disable_home_creation_on_login = true
    
    [grpc.services.authregistry]
    driver = "static"
    
    [grpc.services.authregistry.drivers.static.rules]
    basic = "localhost:18000" # started with the users.toml
    bearer = "localhost:20099" # started with the frontend.toml
    
    [grpc.services.storageregistry]
    driver = "static"
    
    [grpc.services.storageregistry.drivers.static]
    home_provider = "/home"
    
    [grpc.services.storageregistry.drivers.static.rules]
    # mount a home storage provider that uses a context based path wrapper
    # to jail users into their home dir
    "/home" = "localhost:12000"
    
    # mount a storage provider without a path wrapper for direct access to users.
    "/oc" = "localhost:11000"
    "123e4567-e89b-12d3-a456-426655440000" = "localhost:11000"
    # another mount point might be "/projects/" 
    
    [http]
    address = "0.0.0.0:19001"
    
    [http.services.datagateway]
    transfer_shared_secret = "replaced-replace-me-with-a-transfer-secret"
  frontend.toml: |
    [shared]
    jwt_secret = "Pive-Fumkiu4"
    gatewaysvc = "localhost:19000"

    # This frontend.toml config file will start a reva service that:
    # - serves as the entrypoint for owncloud APIs.
    # - serves http endpoints on port 20080
    #   - / --------------- ocdav
    #   - /ocs ------------ ocs
    #   - /oauth2 --------- oidcprovider
    #   - /.well-known ---- wellknown service to announce openid-configuration
    #   - TODO(diocas): ocm
    # - authenticates requests using oidc bearer auth and basic auth as fallback
    # - serves the grpc services on port 18002
    [grpc]
    address = "0.0.0.0:20099"
    
    [grpc.services.authprovider]
    auth_manager = "oidc"
    
    # If you want to use your own openid provider change this config
    [grpc.services.authprovider.auth_managers.oidc]
    issuer = "https://sciencemesh-test.uni-muenster.de/api/"
    
    [http]
    address = "0.0.0.0:20080"
    
    [http.middlewares.cors]
    allow_credentials = true
    
    [http.services.wellknown]
    issuer = "https://sciencemesh-test.uni-muenster.de/api/"
    authorization_endpoint = "https://sciencemesh-test.uni-muenster.de/api/oauth2/auth"
    token_endpoint = "https://sciencemesh-test.uni-muenster.de/api/oauth2/token" 
    revocation_endpoint = "https://sciencemesh-test.uni-muenster.de/api/oauth2/auth"
    introspection_endpoint = "https://sciencemesh-test.uni-muenster.de/api/oauth2/introspect"
    userinfo_endpoint = "https://sciencemesh-test.uni-muenster.de/api/oauth2/userinfo"
    
    [http.services.oidcprovider]
    prefix = "oauth2"
    issuer = "https://sciencemesh-test.uni-muenster.de/api/"
    
    [http.services.oidcprovider.clients.phoenix]
    id = "phoenix"
    redirect_uris = ["https://sciencemesh-test.uni-muenster.de/oidc-callback.html", "https://sciencemesh-test.uni-muenster.de/"]
    grant_types = ["implicit", "refresh_token", "authorization_code", "password", "client_credentials"]
    response_types = ["code"] # use authorization code flow, see https://developer.okta.com/blog/2019/05/01/is-the-oauth-implicit-flow-dead for details
    scopes = ["openid", "profile", "email", "offline"]
    public = true # force PKCS for public clients
    
    [http.services.ocdav]
    # serve ocdav on the root path
    prefix = ""
    chunk_folder = "/var/tmp/reva/chunks"
    # for user lookups
    # prefix the path of requests to /dav/files with this namespace
    # While owncloud has only listed usernames at this endpoint CERN has
    # been exposing more than just usernames. For owncloud deployments we
    # can prefix the path to jail the requests to the correct CS3 namespace.
    # In this deployment we mounted the owncloud storage provider at /oc. It
    # expects a username as the first path segment.
    # currently, only the desktop client will use this endpoint, but only if
    # the dav.chunking capability is available
    # TODO implement a path wrapper that rewrites `<username>` into the path
    # layout for the users home?
    # no, use GetHome?
    # for eos we need to rewrite the path
    # TODO strip the username from the path so the CS3 namespace can be mounted
    # at the files/<username> endpoint? what about migration? separate reva instance
    files_namespace = "/oc"
    
    # similar to the dav/files endpoint we can configure a prefix for the old webdav endpoint
    # we use the old webdav endpoint to present the cs3 namespace
    # note: this changes the tree that is rendered at remote.php/webdav from the users home to the cs3 namespace
    # use webdav_namespace = "/home" to use the old namespace that only exposes the users files
    # this endpoint should not affect the desktop client sync but will present different folders for the other clients:
    # - the desktop clients use a hardcoded remote.php/dav/files/<username> if the dav.chunkung capability is present
    # - the ios ios uses the core.webdav-root capability which points to remote.php/webdav in oc10
    # - the oc js sdk is hardcoded to the remote.php/webdav so it will see the new tree
    # - TODO android? no sync ... but will see different tree
    webdav_namespace = "/home"
    
    [http.services.ocs]
args:
    - "-dev-dir"
    - "."

workingDir: "/etc/revad/"

